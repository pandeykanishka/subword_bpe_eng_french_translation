# -*- coding: utf-8 -*-
"""subword_bpe_eng_french_translation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BQhHXPOI_keq_Zkta25eu4bhCyrrQi1W
"""

import pandas as pd
import numpy as np
import string
from string import digits
import matplotlib.pyplot as plt
# %matplotlib inline
import re
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from keras.layers import Input, LSTM, Embedding, Dense
from keras.models import Model
#from tensorflow.keras.layers import Input, LSTM, Embedding, Dense
#from tensorflow.keras.models import Model

lines= pd.read_table('eng_fre.txt', names=['eng', 'fre'])

!pip install bpemb

from bpemb import BPEmb

lines.fre

type(lines.eng)

bpemb_en = BPEmb(lang="en")

bpemb_fr = BPEmb(lang="fr")

subword_eng=bpemb_en.encode(lines.eng)

subword_fre=bpemb_en.encode(lines.fre)

lines.eng



pickle.dump(subword_eng,open("sub_only_eng.pkl","wb"))

pickle.dump(subword_fre,open("sub_only_fre.pkl","wb"))

from google.colab import files
file=files.upload()

import pickle

import pandas as pd

type(X_train)

subword_eng

"""## For converting list to series"""

sub_eng=pd.Series(subword_eng)

sub_fre=pd.Series(subword_fre)

X_test=pd.Series(X_test)

X_train.shape

pickle.dump(subword_eng, open('sub_eng.pickle', 'wb'))

pickle.dump(subword_fre, open('sub_french.pickle', 'wb'))

import re

import pandas as pd

#thelist = [ ['sentence 1'], ['sentence 2'], ['sentence 3'] ]
sub_eng = pd.Series( (v[0:] for v in subword_eng) )

import pandas as pd

#thelist = [ ['sentence 1'], ['sentence 2'], ['sentence 3'] ]
sub_fre = pd.Series( (v[0:] for v in subword_fre) )

type(sub_eng)

type(subword_eng)

subword_fre=bpemb_fr.encode(lines.fre)

lines.shape

## Lowercase all characters
lines.eng=lines.eng.apply(lambda x: x.lower())
lines.fre=lines.fre.apply(lambda x: x.lower())

# Remove quotes
lines.eng=lines.eng.apply(lambda x: re.sub("'", '', x))
lines.fre=lines.fre.apply(lambda x: re.sub("'", '', x))

import string

exclude = set(string.punctuation) # Set of all special characters
# Remove all the special characters
lines.eng=lines.eng.apply(lambda x: ''.join(ch for ch in x if ch not in exclude))
lines.fre=lines.fre.apply(lambda x: ''.join(ch for ch in x if ch not in exclude))

# Remove all numbers from text
remove_digits = str.maketrans('', '', digits)
lines.eng=lines.eng.apply(lambda x: x.translate(remove_digits))
lines.fre = lines.fre.apply(lambda x: x.translate(remove_digits))

# Remove all numbers from text
remove_digits = str.maketrans('', '', digits)
lines.eng=lines.eng.apply(lambda x: x.translate(remove_digits))
lines.fre = lines.fre.apply(lambda x: re.sub("[0123456789]", "", x))

# Remove extra spaces
lines.eng=lines.eng.apply(lambda x: x.strip())
lines.fre=lines.fre.apply(lambda x: x.strip())
print(lines.eng)
lines.eng=lines.eng.apply(lambda x: re.sub(" +", " ", x))
lines.fre=lines.fre.apply(lambda x: re.sub(" +", " ", x))

lines.eng

# Add start and end tokens to target sequences
lines.fre = lines.fre.apply(lambda x : 'START_ '+ x + ' _END')

lines.fre

import pickle

all_sub_fre=pickle.load(open("all_sub_fre.pkl","rb"))
all_sub_eng=pickle.load(open("all_sub_eng.pkl","rb"))

type(all_sub_fre)

all_sub_fre_vocab=pickle.load(open("all_sub_fre_vocab.pkl","rb"))
all_sub_eng_vocab=pickle.load(open("all_sub_eng_vocab.pkl","rb"))

pickle.dump(sub_fre,open("all_sub_fre.pkl","wb"))
pickle.dump(sub_eng,open("all_sub_eng.pkl","wb"))

all_sub_fre

all_sub_eng

# Vocabulary of English
all_eng_words=set()
for eng in subword_eng:
    print(eng)
    for word in eng:
        print(word)
        if word not in all_eng_words:
            all_eng_words.add(word)



all_eng_words



# Vocabulary of French 
all_french_words=set()
for mar in sub_fre:
    print(mar)
    for word in mar:
        print(word)
        if word not in all_french_words:
            all_french_words.add(word)

all_french_words

len(all_eng_words)

pickle.dump(all_eng_words,open("all_sub_eng_vocab.pkl","wb"))

pickle.dump(all_french_words,open("all_sub_fre_vocab.pkl","wb"))

len(all_french_words)

# Vocabulary of English sub_words
all_eng_sub_words=set()
for eng in lines.eng:
    print(eng)
    for word in eng:
        print(word)
        if word not in all_eng_sub_words:
            all_eng_sub_words.add(word)

import pickle

sub_fre = pickle.load(open('sub_eng.pickle', 'rb'))



sub_fre

# Vocabulary of french sub_words
all_french_sub_words=set()
for eng in sub_fre:
    print(eng)
    for word in eng:
        print(word)
        if word not in all_french_sub_words:
            all_french_sub_words.add(word)

all_french_sub_words=set()
for eng in sub_eng:
    print(eng)
    for word in eng:
        print(word)
        if word not in all_french_sub_words:
            all_french_sub_words.add(word)

import numpy as np

# Max Length of source sequence
lenght_list=[]
for eng in all_sub_eng:
    print(eng)
    lenght_list.append(len(eng))
    print(lenght_list)
max_length_src = np.max(lenght_list)

max_length_src

# Max Length of target sequence
lenght_list=[]
for eng in all_sub_fre:
    print(eng)
    lenght_list.append(len(eng))
    print(lenght_list)
max_length_tar = np.max(lenght_list)

max_length_tar

max_length_src

max_length_tar

# Max Length of target sequence of sub_french
lenght_list=[]
for l in lines.eng:
    print(l)
    lenght_list.append(len(l))
    #lenght_list.append(len(l.split(' ')))
    print(lenght_list)
max_length_tar = np.max(lenght_list)
max_length_tar

max_length_tar=20

max_length_src=20

lenght_list

max_length_tar

all_sub_eng_vocab

input_words = sorted(list(all_sub_eng_vocab))
target_words = sorted(list(all_sub_fre_vocab))
num_encoder_tokens = len(all_sub_eng_vocab)
num_decoder_tokens = len(all_sub_fre_vocab)
num_encoder_tokens, num_decoder_tokens

len(input_words)



num_decoder_tokens += 1 # For zero padding
num_decoder_tokens

input_token_index = dict([(word, i+1) for i, word in enumerate(input_words)])

input_token_index.keys()

target_token_index = dict([(word, i+1) for i, word in enumerate(target_words)])

target_token_index.keys()

reverse_input_char_index = dict((i, word) for word, i in input_token_index.items())
reverse_target_char_index = dict((i, word) for word, i in target_token_index.items())

reverse_input_char_index

lines = shuffle(lines)
lines.head(10)

# Train - Test Split
X, y = lines.eng,lines.fre
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1)

def make_sequences1(a,ner_dict):
    sequences = list()
    for tag in a:
        #print(tag)
        sequence = list()
        for i in range(len(tag)):
                sequence.append(ner_dict[tag[i]])
        sequences.append(sequence)
    return sequences

all_sub_eng=make_sequences1(all_sub_eng,input_token_index)

all_sub_fre=make_sequences1(all_sub_fre,target_token_index)

sequences=all_sub_eng+all_sub_fre

m = 0
lens = list()
for sequence in sequences:
    lens.append(len(sequence))
    m = max(len(sequence),m)
    
print (m)

from keras.preprocessing.sequence import pad_sequences

all_sub_eng = pad_sequences(all_sub_eng, maxlen = 20, padding='post')
all_sub_fre= pad_sequences(all_sub_fre, maxlen = 20, padding='post')

y_train=pd.Series(y_train)

y_test=pd.Series(y_test)

type(X_train)

"""#### Save the train and test dataframes for reproducing the results later, as they are shuffled."""

X_train.to_pickle('X_train.pkl')
X_test.to_pickle('X_test.pkl')

l1 = ["eat","sleep","repeat"]

def generate_batch(X = X_train, y = y_train, batch_size =128 ):
    ''' Generate a batch of data '''
    while True:
        for j in range(0, len(X), batch_size):
            encoder_input_data = np.zeros((batch_size, max_length_src),dtype='float32')
            decoder_input_data = np.zeros((batch_size, max_length_tar),dtype='float32')
            decoder_target_data = np.zeros((batch_size, max_length_tar, num_decoder_tokens),dtype='float32')
            for i, (input_text, target_text) in enumerate(zip(X[j:j+batch_size], y[j:j+batch_size])):
                subword_eng=bpemb_en.encode(input_text)
                #print(subword_eng)
                 
                subword_fre=bpemb_en.encode(target_text)
            
                for t, word in enumerate(subword_eng):
                    #print(t)
                    #print(word)
                    #print(input_token_index[word])
                    encoder_input_data[i, t] = input_token_index[word] # encoder input seq
                for t, word in enumerate(subword_fre):
                    if t<len(subword_fre)-1:
                            #print(target_token_index[word])
                            decoder_input_data[i, t] = target_token_index[word] # decoder input seq
                    if t>0:
                        # decoder target sequence (one hot encoded)
                        # does not include the START_ token
                        # Offset by one timestep
                            decoder_target_data[i, t - 1, target_token_index[word]] = 1.
            yield([encoder_input_data, decoder_input_data], decoder_target_data)

"""### Encoder - Decoder Model Architecture"""

latent_dim = 50

# Encoder
encoder_inputs = Input(shape=(None,))
enc_emb =  Embedding(num_encoder_tokens, latent_dim, mask_zero = True)(encoder_inputs)
encoder_lstm = LSTM(latent_dim, return_state=True)
encoder_outputs, state_h, state_c = encoder_lstm(enc_emb)
# We discard `encoder_outputs` and only keep the states.
encoder_states = [state_h, state_c]

# Set up the decoder, using `encoder_states` as initial state.
decoder_inputs = Input(shape=(None,))
dec_emb_layer = Embedding(num_decoder_tokens, latent_dim, mask_zero = True)
dec_emb = dec_emb_layer(decoder_inputs)
# We set up our decoder to return full output sequences,
# and to return internal states as well. We don't use the
# return states in the training model, but we will use them in inference.
decoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True)
decoder_outputs, _, _ = decoder_lstm(dec_emb,
                                     initial_state=encoder_states)
decoder_dense = Dense(num_decoder_tokens, activation='softmax')
decoder_outputs = decoder_dense(decoder_outputs)

# Define the model that will turn
# `encoder_input_data` & `decoder_input_data` into `decoder_target_data`
model = Model([encoder_inputs, decoder_inputs], decoder_outputs)

model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['acc'])

train_samples = len(X_train)
val_samples = len(X_test)
batch_size = 128
epochs = 5

model.fit_generator(generator = generate_batch(X_train, y_train, batch_size = batch_size),
                    steps_per_epoch = train_samples//batch_size,
                    epochs=epochs,
                    validation_data = generate_batch(X_test, y_test, batch_size = batch_size),
                    validation_steps = val_samples//batch_size)

"""### Always remember to save the weights"""

model.save_weights('nmt_weights.h5')

"""### Load the weights, if you close the application"""

model.load_weights('nmt_weights.h5')

"""### Inference Setup"""

# Encode the input sequence to get the "thought vectors"
encoder_model = Model(encoder_inputs, encoder_states)

# Decoder setup
# Below tensors will hold the states of the previous time step
decoder_state_input_h = Input(shape=(latent_dim,))
decoder_state_input_c = Input(shape=(latent_dim,))
decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]

dec_emb2= dec_emb_layer(decoder_inputs) # Get the embeddings of the decoder sequence

# To predict the next word in the sequence, set the initial states to the states from the previous time step
decoder_outputs2, state_h2, state_c2 = decoder_lstm(dec_emb2, initial_state=decoder_states_inputs)
decoder_states2 = [state_h2, state_c2]
decoder_outputs2 = decoder_dense(decoder_outputs2) # A dense softmax layer to generate prob dist. over the target vocabulary

# Final decoder model
decoder_model = Model(
    [decoder_inputs] + decoder_states_inputs,
    [decoder_outputs2] + decoder_states2)

"""### Decode sample sequeces"""

def decode_sequence(input_seq):
    # Encode the input as state vectors.
    states_value = encoder_model.predict(input_seq)
    # Generate empty target sequence of length 1.
    target_seq = np.zeros((1,1))
    # Populate the first character of target sequence with the start character.
    target_seq[0, 0] = target_token_index['▁start']

    # Sampling loop for a batch of sequences
    # (to simplify, here we assume a batch of size 1).
    stop_condition = False
    decoded_sentence = ''
    while not stop_condition:
        output_tokens, h, c = decoder_model.predict([target_seq] + states_value)

        # Sample a token
        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_char = reverse_target_char_index[sampled_token_index]
        decoded_sentence += ' '+sampled_char

        # Exit condition: either hit max length
        # or find stop character.
        if (sampled_char == '_END' or
           len(decoded_sentence) > 50):
            stop_condition = True

        # Update the target sequence (of length 1).
        target_seq = np.zeros((1,1))
        target_seq[0, 0] = sampled_token_index

        # Update states
        states_value = [h, c]

    return decoded_sentence

"""### Evaluation on Train Dataset"""

train_gen = generate_batch(X_train, y_train, batch_size = 1)
k=-1

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print(' Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(train_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_train[k:k+1].values[0])
print('Actual French Translation:', y_train[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])



"""### Evaluation on Validation Dataset"""

val_gen = generate_batch(X_test, y_test, batch_size = 1)
k=-1

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])

k+=1
(input_seq, actual_output), _ = next(val_gen)
decoded_sentence = decode_sequence(input_seq)
print('Input English sentence:', X_test[k:k+1].values[0])
print('Actual French Translation:', y_test[k:k+1].values[0][6:-4])
print('Predicted French Translation:', decoded_sentence[:-4])









